// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/Drive/DriveWithJoystick.h"
#include "Commands/TeleOp/CubeIntakeCommand.h"
#include "Commands/TeleOp/ToggleSliderUsage.h"
#include "Commands/TogglePot.h"
#include <iostream>
#include "Commands/Autonomous/SetShaftSetpointAuto.h"
#include "Commands/TeleOp/ReleaseRamp.h"
#include "Commands/TeleOp/ReleaseShaft.h"
#include "Commands/TeleOp/EnableEndGameButtons.h"
#include "Commands/TeleOp/Climb.h"
#include "Commands/TeleOp/LiftRamp.h"
#include "Commands/ElevatorDoNothing.h"
#include "Commands/TeleOp/SetShaftSetpointTeleop.h"
#include "Commands/ManualShaftControl.h"

OI::OI() {
	driverJoystick.reset(new frc::Joystick(0));
	buttonBoard.reset(new frc::Joystick(1));

	intakeButton.reset(new frc::JoystickButton(buttonBoard.get(), 1));
	expungeButton.reset(new frc::JoystickButton(buttonBoard.get(), 2));
	toggleSliderControl.reset(new frc::JoystickButton(buttonBoard.get(), 3));
	releaseShaftButton.reset(new frc::JoystickButton(buttonBoard.get(), 4));
	releaseRampButton.reset(new frc::JoystickButton(buttonBoard.get(), 9)); //FIXME maybe i dunno
	togglePot.reset(new frc::JoystickButton(buttonBoard.get(), 8));

	endgameOverride.reset(new frc::JoystickButton(buttonBoard.get(), 5));
	climb.reset(new frc::JoystickButton(buttonBoard.get(), 6));
	rampLift.reset(new frc::JoystickButton(buttonBoard.get(), 7));

	toggleSliderControl->WhenPressed(new ToggleSliderUsage());
	togglePot->WhenPressed(new TogglePot());

	expungeButton->WhileHeld(new CubeIntakeCommand(false, 0));
	intakeButton->WhileHeld(new CubeIntakeCommand(true, 0));

	releaseShaftButton->WhenPressed(new ReleaseShaft());

	climb->WhileHeld(new Climb());
	rampLift->WhenPressed(new LiftRamp());

}

void OI::ResetShaft() {
	if(!useSlider) {
		Robot::elevator->SetDefaultCommand(new ElevatorDoNothing());
		DriverStation::ReportError("Doig Nothing");
		GetButtonBoard()->SetOutput(4, true);
	} else {
		GetButtonBoard()->SetOutput(4, false);
		if (usePot) {
			Robot::elevator->SetDefaultCommand(new SetShaftSetpointTeleop(RobotMap::pot->Get()));
			DriverStation::ReportError("Using POT");
		} else {
			Robot::elevator->SetDefaultCommand(new ManualShaftControl());
			DriverStation::ReportError("Using Manual Control");
		}
	}
	frc::Scheduler::GetInstance()->Run();
}

std::shared_ptr<frc::Joystick> OI::GetDriverJoystick() {
	return driverJoystick;
}

std::shared_ptr<frc::Joystick> OI::GetButtonBoard() {
	return buttonBoard;
}

std::shared_ptr<frc::JoystickButton> OI::GetReleaseRampButton() {
	return releaseRampButton;
}

std::shared_ptr<frc::JoystickButton> OI::GetLiftRampButton() {
	return rampLift;
}

std::shared_ptr<frc::JoystickButton> OI::GetClimbButton() {
	return climb;
}



